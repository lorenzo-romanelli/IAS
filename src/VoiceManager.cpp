#include "VoiceManager.h"

VoiceManager::VoiceManager(void) {}

VoiceManager::~VoiceManager(void) {}

/* Returns the first free voice found */
Voice* VoiceManager::findFreeVoice() {
	Voice *freeVoice = NULL;
	for (int i = 0; i < NumberOfVoices; i++) {
		if (!voices[i].isActive) {
			freeVoice = &(voices[i]);
			break;
		}
	}
	return freeVoice;
}

/* Reacts to a "note on" signal (see ProgettoIAS's class constructor) */
void VoiceManager::onNoteOn(int noteNumber, int velocity) {
    Voice* voice = findFreeVoice();	
    if (!voice) {
        return;
    }
	// A free voice has been found:
    voice->reset();	// reset its parameters
    voice->setNoteNumber(noteNumber);
    voice->mVelocity = velocity;
    voice->isActive = true; // activate the voice
    voice->mVolumeEnvelope.enterStage(EnvelopeGenerator::ENVELOPE_STAGE_ATTACK); // start calculating the ADSR envelope
}

/* Reacts to a "note off" signal */
void VoiceManager::onNoteOff(int noteNumber, int velocity) {
	for (int i = 0; i < NumberOfVoices; i++) {
		Voice& voice = voices[i];
		if (voice.isActive && voice.mNoteNumber == noteNumber) {
			// ADSR envelope enters the release stage
			voice.mVolumeEnvelope.enterStage(EnvelopeGenerator::ENVELOPE_STAGE_RELEASE);
		}
	}
}

/* Returns the current sample as the sum of the samples generated by each indipendent voice */
double VoiceManager::nextSample() {
	double output = 0.0;
	for (int i = 0; i < NumberOfVoices; i++) {
		Voice& voice = voices[i];
		output += voice.nextSample();
	}
	return output;
}